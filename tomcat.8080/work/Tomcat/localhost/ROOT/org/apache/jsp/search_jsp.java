/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-22 15:30:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.ArrayList;
import uk.ac.ucl.model.Note;

public final class search_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("uk.ac.ucl.model.Note");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("  <title>Search Results - Notes App</title>\n");
      out.write("  <link rel=\"stylesheet\" href=\"styles.css\">\n");
      out.write("  <style>\n");
      out.write("    /* Search results specific styles */\n");
      out.write("    .search-header {\n");
      out.write("      display: flex;\n");
      out.write("      justify-content: space-between;\n");
      out.write("      align-items: center;\n");
      out.write("      margin-bottom: 1.5rem;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .search-info {\n");
      out.write("      color: #6b7280;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .search-query {\n");
      out.write("      font-weight: bold;\n");
      out.write("      color: #3b82f6;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .search-container {\n");
      out.write("      margin-bottom: 2rem;\n");
      out.write("      width: 100%;\n");
      out.write("      max-width: 600px;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .search-form {\n");
      out.write("      display: flex;\n");
      out.write("      width: 100%;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .search-input {\n");
      out.write("      flex: 1;\n");
      out.write("      padding: 0.75rem 1rem;\n");
      out.write("      border: 1px solid #d1d5db;\n");
      out.write("      border-right: none;\n");
      out.write("      border-radius: 0.375rem 0 0 0.375rem;\n");
      out.write("      font-size: 1rem;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .search-input:focus {\n");
      out.write("      outline: none;\n");
      out.write("      border-color: #3b82f6;\n");
      out.write("      box-shadow: 0 0 0 1px rgba(59, 130, 246, 0.5);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .search-button {\n");
      out.write("      background-color: #3b82f6;\n");
      out.write("      color: white;\n");
      out.write("      border: none;\n");
      out.write("      border-radius: 0 0.375rem 0.375rem 0;\n");
      out.write("      padding: 0 1rem;\n");
      out.write("      cursor: pointer;\n");
      out.write("      display: flex;\n");
      out.write("      align-items: center;\n");
      out.write("      justify-content: center;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .search-button:hover {\n");
      out.write("      background-color: #2563eb;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .search-icon {\n");
      out.write("      font-size: 1.25rem;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .highlight {\n");
      out.write("      background-color: rgba(59, 130, 246, 0.2);\n");
      out.write("      padding: 0.125rem 0.25rem;\n");
      out.write("      border-radius: 0.25rem;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .match-info {\n");
      out.write("      font-size: 0.875rem;\n");
      out.write("      color: #6b7280;\n");
      out.write("      margin-top: 0.5rem;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .match-type {\n");
      out.write("      font-weight: bold;\n");
      out.write("      color: #4b5563;\n");
      out.write("    }\n");
      out.write("  </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("  <div class=\"container\">\n");
      out.write("    <header>\n");
      out.write("      <div class=\"header-top\">\n");
      out.write("        <h1>Search Results</h1>\n");
      out.write("\n");
      out.write("        <!-- Search Bar -->\n");
      out.write("        <div class=\"search-container\">\n");
      out.write("          <form action=\"search\" method=\"GET\" class=\"search-form\">\n");
      out.write("            <input type=\"text\" name=\"query\" value=\"");
      out.print( request.getAttribute("query") );
      out.write("\" placeholder=\"Search notes...\" class=\"search-input\" required>\n");
      out.write("            <button type=\"submit\" class=\"search-button\">\n");
      out.write("              <span class=\"search-icon\">üîç</span>\n");
      out.write("            </button>\n");
      out.write("          </form>\n");
      out.write("        </div>\n");
      out.write("      </div>\n");
      out.write("\n");
      out.write("      <div class=\"header-actions\">\n");
      out.write("        <a href=\"index.html\" class=\"btn secondary\">\n");
      out.write("          <span class=\"icon\">‚Üê</span> Back to Home\n");
      out.write("        </a>\n");
      out.write("      </div>\n");
      out.write("    </header>\n");
      out.write("\n");
      out.write("    <div class=\"search-header\">\n");
      out.write("      <p class=\"search-info\">\n");
      out.write("        Found <strong>");
      out.print( request.getAttribute("resultCount") );
      out.write("</strong> results for\n");
      out.write("        \"<span class=\"search-query\">");
      out.print( request.getAttribute("query") );
      out.write("</span>\"\n");
      out.write("      </p>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"notes-container\">\n");
      out.write("      ");

        ArrayList<Note> searchResults = (ArrayList<Note>) request.getAttribute("searchResults");
        String query = ((String) request.getAttribute("query")).toLowerCase();

        if (searchResults != null && !searchResults.isEmpty()) {
          for (Note note : searchResults) {
            // Determine where the match was found
            boolean matchInTitle = note.getName().toLowerCase().contains(query);
            boolean matchInContent = note.getText().toLowerCase().contains(query);
            boolean matchInImage = false;
            String matchedImageName = "";

            for (String imagePath : note.getImagePaths()) {
              String imageName = imagePath.substring(imagePath.lastIndexOf("/") + 1).toLowerCase();
              if (imageName.contains(query)) {
                matchInImage = true;
                matchedImageName = imagePath.substring(imagePath.lastIndexOf("/") + 1);
                break;
              }
            }
      
      out.write("\n");
      out.write("        <div class=\"note-card\" onclick=\"location.href='viewNote?id=");
      out.print( note.getId() );
      out.write("'\">\n");
      out.write("          <div class=\"note-title\">\n");
      out.write("            <span class=\"note-icon\">üìù</span>\n");
      out.write("            ");
 if (matchInTitle) {
                 // Highlight the matching part in the title
                 String title = note.getName();
                 int startIndex = title.toLowerCase().indexOf(query);
                 String before = title.substring(0, startIndex);
                 String match = title.substring(startIndex, startIndex + query.length());
                 String after = title.substring(startIndex + query.length());
            
      out.write("\n");
      out.write("              ");
      out.print( before );
      out.write("<span class=\"highlight\">");
      out.print( match );
      out.write("</span>");
      out.print( after );
      out.write("\n");
      out.write("            ");
 } else { 
      out.write("\n");
      out.write("              ");
      out.print( note.getName() );
      out.write("\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("          </div>\n");
      out.write("\n");
      out.write("          <div class=\"note-preview\">\n");
      out.write("            ");
 if (matchInContent) {
                 // Show a snippet of content around the match
                 String content = note.getText();
                 int startIndex = content.toLowerCase().indexOf(query);
                 int snippetStart = Math.max(0, startIndex - 50);
                 int snippetEnd = Math.min(content.length(), startIndex + query.length() + 50);

                 // Adjust snippet to not cut words
                 if (snippetStart > 0) {
                   while (snippetStart > 0 && content.charAt(snippetStart) != ' ') {
                     snippetStart--;
                   }
                 }

                 if (snippetEnd < content.length()) {
                   while (snippetEnd < content.length() && content.charAt(snippetEnd) != ' ') {
                     snippetEnd++;
                   }
                 }

                 String snippet = content.substring(snippetStart, snippetEnd);

                 // Add ellipsis if needed
                 if (snippetStart > 0) {
                   snippet = "..." + snippet;
                 }

                 if (snippetEnd < content.length()) {
                   snippet = snippet + "...";
                 }

                 // Highlight the match in the snippet
                 int matchStartInSnippet = snippet.toLowerCase().indexOf(query);
                 String beforeMatch = snippet.substring(0, matchStartInSnippet);
                 String match = snippet.substring(matchStartInSnippet, matchStartInSnippet + query.length());
                 String afterMatch = snippet.substring(matchStartInSnippet + query.length());
            
      out.write("\n");
      out.write("              ");
      out.print( beforeMatch );
      out.write("<span class=\"highlight\">");
      out.print( match );
      out.write("</span>");
      out.print( afterMatch );
      out.write("\n");
      out.write("            ");
 } else { 
      out.write("\n");
      out.write("              ");
      out.print( note.getText().length() > 150 ? note.getText().substring(0, 150) + "..." : note.getText() );
      out.write("\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("          </div>\n");
      out.write("\n");
      out.write("          <div class=\"note-meta\">\n");
      out.write("            <div class=\"directory-path\">\n");
      out.write("              <span class=\"folder-icon\">üìÇ</span> ");
      out.print( note.getDirectoryPath() );
      out.write("\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"match-info\">\n");
      out.write("              ");
 if (matchInTitle) { 
      out.write("\n");
      out.write("                <span class=\"match-type\">Match in title</span>\n");
      out.write("              ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("              ");
 if (matchInContent) { 
      out.write("\n");
      out.write("                ");
 if (matchInTitle) { 
      out.write(' ');
      out.write('‚Ä¢');
      out.write(' ');
 } 
      out.write("\n");
      out.write("                <span class=\"match-type\">Match in content</span>\n");
      out.write("              ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("              ");
 if (matchInImage) { 
      out.write("\n");
      out.write("                ");
 if (matchInTitle || matchInContent) { 
      out.write(' ');
      out.write('‚Ä¢');
      out.write(' ');
 } 
      out.write("\n");
      out.write("                <span class=\"match-type\">Match in image: </span>");
      out.print( matchedImageName );
      out.write("\n");
      out.write("              ");
 } 
      out.write("\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            ");
 if (!note.getCategories().isEmpty()) { 
      out.write("\n");
      out.write("              <div class=\"note-categories\">\n");
      out.write("                ");
 for (String category : note.getCategories()) { 
      out.write("\n");
      out.write("                  <span class=\"category-tag\">");
      out.print( category );
      out.write("</span>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("              </div>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("          </div>\n");
      out.write("        </div>\n");
      out.write("      ");

        }
      } else {
      
      out.write("\n");
      out.write("        <div class=\"empty-state\">\n");
      out.write("          <p>No results found for \"");
      out.print( request.getAttribute("query") );
      out.write("\".</p>\n");
      out.write("          <p>Try using different keywords or check your spelling.</p>\n");
      out.write("          <a href=\"index.html\" class=\"btn primary\">Back to Home</a>\n");
      out.write("        </div>\n");
      out.write("      ");

        }
      
      out.write("\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
