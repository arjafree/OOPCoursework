/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-21 11:20:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import uk.ac.ucl.model.Category;
import uk.ac.ucl.model.Directory;
import java.util.ArrayList;
import java.util.List;
import java.io.IOException;

public final class createNote_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {


  // Helper method to recursively render directory options
  private void renderDirectoryOptions(JspWriter out, Directory directory, String indent, String selectedPath) throws IOException {
    String dirPath = directory.getPath();
    String dirName = directory.getName();
    boolean isSelected = dirPath.equals(selectedPath);

    // Root directory needs special handling
    if (dirPath.equals("/")) {
      out.println("<option value=\"" + dirPath + "\"" + (isSelected ? " selected" : "") + ">" +
                  indent + "Root" + "</option>");
    } else {
      out.println("<option value=\"" + dirPath + "\"" + (isSelected ? " selected" : "") + ">" +
                  indent + dirName + "</option>");
    }

    List<Directory> subdirectories = directory.getSubdirectories();
    if (subdirectories != null && !subdirectories.isEmpty()) {
      for (Directory subdir : subdirectories) {
        renderDirectoryOptions(out, subdir, indent + "— ", selectedPath);
      }
    }
  }

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(7);
    _jspx_imports_classes.add("uk.ac.ucl.model.Category");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("uk.ac.ucl.model.Directory");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("  <title>Create Note</title>\n");
      out.write("  <link rel=\"stylesheet\" href=\"styles.css\">\n");
      out.write("  <style>\n");
      out.write("    /* Additional styles for file upload */\n");
      out.write("    .file-upload-container {\n");
      out.write("      border: 2px dashed #d1d5db;\n");
      out.write("      border-radius: 0.375rem;\n");
      out.write("      padding: 1.5rem;\n");
      out.write("      text-align: center;\n");
      out.write("      margin-bottom: 1rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .upload-icon {\n");
      out.write("      font-size: 2rem;\n");
      out.write("      margin-bottom: 0.5rem;\n");
      out.write("      color: #6b7280;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .upload-text {\n");
      out.write("      color: #6b7280;\n");
      out.write("      margin-bottom: 0.5rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .upload-hint {\n");
      out.write("      font-size: 0.875rem;\n");
      out.write("      color: #9ca3af;\n");
      out.write("      margin-bottom: 1rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .file-input-container {\n");
      out.write("      display: flex;\n");
      out.write("      justify-content: center;\n");
      out.write("      margin-top: 1rem;\n");
      out.write("    }\n");
      out.write("  </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("  <div class=\"container\">\n");
      out.write("    <header>\n");
      out.write("      <h1>Create New Note</h1>\n");
      out.write("      <div class=\"header-actions\">\n");
      out.write("        <a href=\"javascript:history.back()\" class=\"btn secondary\">\n");
      out.write("          <span class=\"icon\">←</span> Cancel\n");
      out.write("        </a>\n");
      out.write("      </div>\n");
      out.write("    </header>\n");
      out.write("\n");
      out.write("    <div class=\"main-content single-column\">\n");
      out.write("      <main class=\"notes-container\">\n");
      out.write("        <div class=\"note-editor\">\n");
      out.write("          <form action=\"createNote\" method=\"POST\" enctype=\"multipart/form-data\">\n");
      out.write("            ");

              int newId = 0;
              try {
                newId = (int) request.getAttribute("newId");
              } catch (Exception e) {
                // If attribute is not set, use a default value
              }

              // Get the directory and category from the request parameters
              String directoryParam = request.getParameter("directory");
              String categoryParam = request.getParameter("category");

              // If no directory is specified, use the root directory
              if (directoryParam == null || directoryParam.isEmpty()) {
                directoryParam = "/";
              }
            
      out.write("\n");
      out.write("            <input type=\"hidden\" name=\"id\" value=\"");
      out.print( newId );
      out.write("\">\n");
      out.write("            <!-- <input type=\"hidden\" name=\"directoryPath\" value=\"");
      out.print( directoryParam );
      out.write("\"> -->\n");
      out.write("\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("              <label for=\"title\">Title</label>\n");
      out.write("              <input type=\"text\" id=\"title\" name=\"title\" required>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("              <label for=\"content\">Content</label>\n");
      out.write("              <textarea id=\"content\" name=\"content\" rows=\"8\" required></textarea>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("              <label for=\"directorySelect\">Directory</label>\n");
      out.write("              <select id=\"directorySelect\" name=\"directoryPath\">\n");
      out.write("                ");

                  // Get the root directory
                  Directory rootDirectory = (Directory) request.getAttribute("rootDirectory");
                  if (rootDirectory != null) {
                    renderDirectoryOptions(out, rootDirectory, "", directoryParam);
                  }
                
      out.write("\n");
      out.write("              </select>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("              <label>Categories</label>\n");
      out.write("              <div class=\"category-checkboxes\">\n");
      out.write("                ");

                  ArrayList<Category> categories = (ArrayList) request.getAttribute("categories");
                  if (categories != null) {
                    for (Category category : categories) {
                      boolean isSelected = category.getName().equals(categoryParam);
                
      out.write("\n");
      out.write("                <div class=\"checkbox-item\">\n");
      out.write("                  <input type=\"checkbox\"\n");
      out.write("                         id=\"category-");
      out.print( category.getName() );
      out.write("\"\n");
      out.write("                         name=\"categories\"\n");
      out.write("                         value=\"");
      out.print( category.getName() );
      out.write("\"\n");
      out.write("                         ");
      out.print( isSelected ? "checked" : "" );
      out.write(">\n");
      out.write("                  <label for=\"category-");
      out.print( category.getName() );
      out.write('"');
      out.write('>');
      out.print( category.getName() );
      out.write("</label>\n");
      out.write("                </div>\n");
      out.write("                ");

                    }
                  }
                
      out.write("\n");
      out.write("              </div>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("              <label>Images</label>\n");
      out.write("              <div class=\"file-upload-container\">\n");
      out.write("                <div class=\"upload-icon\">📷</div>\n");
      out.write("                <div class=\"upload-text\">Upload images for your note</div>\n");
      out.write("                <div class=\"upload-hint\">Supported formats: JPG, PNG, GIF</div>\n");
      out.write("                <div class=\"file-input-container\">\n");
      out.write("                  <input type=\"file\" name=\"imageFiles\" multiple accept=\"image/*\">\n");
      out.write("                </div>\n");
      out.write("              </div>\n");
      out.write("            </div>\n");
      out.write("            \n");
      out.write("            <div class=\"form-actions\">\n");
      out.write("              <button type=\"button\" class=\"btn secondary\" onclick=\"history.back()\">Cancel</button>\n");
      out.write("              <button type=\"submit\" class=\"btn primary\">Save Note</button>\n");
      out.write("            </div>\n");
      out.write("          </form>\n");
      out.write("        </div>\n");
      out.write("      </main>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
