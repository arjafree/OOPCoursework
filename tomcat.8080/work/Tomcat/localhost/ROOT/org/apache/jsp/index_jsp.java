/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-13 12:03:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import uk.ac.ucl.model.Index;
import uk.ac.ucl.model.Note;
import uk.ac.ucl.model.Category;
import java.util.ArrayList;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("uk.ac.ucl.model.Index");
    _jspx_imports_classes.add("uk.ac.ucl.model.Category");
    _jspx_imports_classes.add("uk.ac.ucl.model.Note");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("  <title>Notes App</title>\n");
      out.write("  <link rel=\"stylesheet\" href=\"styles.css\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("  <div class=\"container\">\n");
      out.write("    <header>\n");
      out.write("      <h1>Notes App</h1>\n");
      out.write("      <div class=\"header-actions\">\n");
      out.write("        <a href=\"createCategory.jsp\" class=\"btn primary\">\n");
      out.write("          <span class=\"icon\">+</span> New Category\n");
      out.write("        </a>\n");
      out.write("      </div>\n");
      out.write("    </header>\n");
      out.write("\n");
      out.write("    <div class=\"main-content\">\n");
      out.write("      <main class=\"notes-container\">\n");
      out.write("        <h2>All Categories</h2>\n");
      out.write("\n");
      out.write("        <div class=\"categories-grid\">\n");
      out.write("          ");

            ArrayList<Category> categories = (ArrayList<Category>) request.getAttribute("categories");
            if (categories != null && !categories.isEmpty()) {
              for (Category category : categories) {
          
      out.write("\n");
      out.write("            <div class=\"category-card\">\n");
      out.write("              <div class=\"category-header\">\n");
      out.write("                <h3 class=\"category-title\">\n");
      out.write("                  <span class=\"folder-icon\">üìÅ</span>\n");
      out.write("                  ");
      out.print( category.getName() );
      out.write("\n");
      out.write("                </h3>\n");
      out.write("                <a href=\"displayNotes?category=");
      out.print( category.getName() );
      out.write("\" class=\"view-all\">View All</a>\n");
      out.write("              </div>\n");
      out.write("              <div class=\"notes-list\">\n");
      out.write("                ");

                  if (category.getNotes().size() > 0) {
                    // Display up to 3 notes per category on the index page
                    int notesToShow = Math.min(category.getNotes().size(), 3);
                    for (int i = 0; i < notesToShow; i++) {
                      Note note = category.getNotes().get(i);
                
      out.write("\n");
      out.write("                  <div class=\"note-item\">\n");
      out.write("                    <a href=\"viewNote?id=");
      out.print( note.getId() );
      out.write("\" class=\"note-link\">\n");
      out.write("                      <span class=\"note-icon\">üìù</span>\n");
      out.write("                      ");
      out.print( note.getName() );
      out.write("\n");
      out.write("                    </a>\n");
      out.write("                  </div>\n");
      out.write("                ");

                    }
                    // If there are more notes than we're showing
                    if (category.getNotes().size() > 3) {
                
      out.write("\n");
      out.write("                  <div class=\"more-notes\">\n");
      out.write("                    + ");
      out.print( category.getNotes().size() - 3 );
      out.write(" more notes\n");
      out.write("                  </div>\n");
      out.write("                ");

                    }
                  } else {
                
      out.write("\n");
      out.write("                  <div class=\"empty-notes\">No notes in this category</div>\n");
      out.write("                ");

                  }
                
      out.write("\n");
      out.write("              </div>\n");
      out.write("              <div class=\"category-footer\">\n");
      out.write("                <a href=\"createNote.jsp?category=");
      out.print( category.getName() );
      out.write("\" class=\"btn secondary small\">\n");
      out.write("                  <span class=\"icon\">+</span> Add Note\n");
      out.write("                </a>\n");
      out.write("              </div>\n");
      out.write("            </div>\n");
      out.write("          ");

              }
            } else {
          
      out.write("\n");
      out.write("            <div class=\"empty-state\">\n");
      out.write("              <p>No categories available. Create your first category to get started!</p>\n");
      out.write("              <a href=\"createCategory.jsp\" class=\"btn primary\">Create Category</a>\n");
      out.write("            </div>\n");
      out.write("          ");

            }
          
      out.write("\n");
      out.write("        </div>\n");
      out.write("      </main>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
