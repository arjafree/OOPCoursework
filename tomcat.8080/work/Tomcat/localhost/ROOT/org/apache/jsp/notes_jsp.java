/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-22 15:37:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import uk.ac.ucl.model.Note;
import java.util.ArrayList;
import java.util.List;

public final class notes_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("uk.ac.ucl.model.Note");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("  <title>Notes in ");
      out.print( request.getAttribute("categoryName") );
      out.write("</title>\n");
      out.write("  <link rel=\"stylesheet\" href=\"styles.css\">\n");
      out.write("  <style>\n");
      out.write("    /* Additional styles for notes page */\n");
      out.write("    .category-banner {\n");
      out.write("      background-color: #f3f4f6;\n");
      out.write("      border-radius: 0.5rem;\n");
      out.write("      padding: 1.5rem;\n");
      out.write("      margin-bottom: 2rem;\n");
      out.write("      display: flex;\n");
      out.write("      align-items: center;\n");
      out.write("      justify-content: space-between;\n");
      out.write("      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .category-info {\n");
      out.write("      display: flex;\n");
      out.write("      align-items: center;\n");
      out.write("      gap: 1rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .category-icon {\n");
      out.write("      font-size: 2rem;\n");
      out.write("      color: #3b82f6;\n");
      out.write("      background-color: rgba(59, 130, 246, 0.1);\n");
      out.write("      width: 3.5rem;\n");
      out.write("      height: 3.5rem;\n");
      out.write("      display: flex;\n");
      out.write("      align-items: center;\n");
      out.write("      justify-content: center;\n");
      out.write("      border-radius: 0.5rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .category-details h2 {\n");
      out.write("      margin: 0 0 0.5rem 0;\n");
      out.write("      font-size: 1.5rem;\n");
      out.write("      color: #1f2937;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .category-details p {\n");
      out.write("      margin: 0;\n");
      out.write("      color: #6b7280;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .notes-grid {\n");
      out.write("      display: grid;\n");
      out.write("      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n");
      out.write("      gap: 1.5rem;\n");
      out.write("      margin-bottom: 2rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .note-card {\n");
      out.write("      background-color: white;\n");
      out.write("      border-radius: 0.5rem;\n");
      out.write("      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n");
      out.write("      padding: 1.5rem;\n");
      out.write("      transition: transform 0.2s, box-shadow 0.2s;\n");
      out.write("      cursor: pointer;\n");
      out.write("      display: flex;\n");
      out.write("      flex-direction: column;\n");
      out.write("      height: 100%;\n");
      out.write("      border: 1px solid #e5e7eb;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .note-card:hover {\n");
      out.write("      transform: translateY(-2px);\n");
      out.write("      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .note-title {\n");
      out.write("      font-size: 1.25rem;\n");
      out.write("      font-weight: 600;\n");
      out.write("      margin-bottom: 0.75rem;\n");
      out.write("      color: #1f2937;\n");
      out.write("      display: flex;\n");
      out.write("      align-items: center;\n");
      out.write("      gap: 0.5rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .note-icon {\n");
      out.write("      color: #3b82f6;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .note-preview {\n");
      out.write("      color: #4b5563;\n");
      out.write("      margin-bottom: 1rem;\n");
      out.write("      flex-grow: 1;\n");
      out.write("      overflow: hidden;\n");
      out.write("      display: -webkit-box;\n");
      out.write("      -webkit-line-clamp: 4;\n");
      out.write("      -webkit-box-orient: vertical;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .note-meta {\n");
      out.write("      display: flex;\n");
      out.write("      flex-direction: column;\n");
      out.write("      gap: 0.5rem;\n");
      out.write("      font-size: 0.875rem;\n");
      out.write("      color: #6b7280;\n");
      out.write("      margin-top: auto;\n");
      out.write("      padding-top: 1rem;\n");
      out.write("      border-top: 1px solid #f3f4f6;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .directory-path {\n");
      out.write("      display: flex;\n");
      out.write("      align-items: center;\n");
      out.write("      gap: 0.25rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .folder-icon {\n");
      out.write("      color: #f59e0b;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .note-categories {\n");
      out.write("      display: flex;\n");
      out.write("      flex-wrap: wrap;\n");
      out.write("      gap: 0.5rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .category-tag {\n");
      out.write("      background-color: #f3f4f6;\n");
      out.write("      color: #4b5563;\n");
      out.write("      padding: 0.25rem 0.5rem;\n");
      out.write("      border-radius: 9999px;\n");
      out.write("      font-size: 0.75rem;\n");
      out.write("      white-space: nowrap;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .empty-state {\n");
      out.write("      text-align: center;\n");
      out.write("      padding: 3rem;\n");
      out.write("      background-color: #f9fafb;\n");
      out.write("      border-radius: 0.5rem;\n");
      out.write("      color: #6b7280;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .empty-state p {\n");
      out.write("      margin-bottom: 1.5rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .header-actions {\n");
      out.write("      display: flex;\n");
      out.write("      gap: 0.75rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    @media (max-width: 768px) {\n");
      out.write("      .category-banner {\n");
      out.write("        flex-direction: column;\n");
      out.write("        align-items: flex-start;\n");
      out.write("        gap: 1rem;\n");
      out.write("      }\n");
      out.write("      \n");
      out.write("      .category-info {\n");
      out.write("        width: 100%;\n");
      out.write("      }\n");
      out.write("      \n");
      out.write("      .header-actions {\n");
      out.write("        width: 100%;\n");
      out.write("        justify-content: flex-end;\n");
      out.write("      }\n");
      out.write("      \n");
      out.write("      .notes-grid {\n");
      out.write("        grid-template-columns: 1fr;\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("  </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("  <div class=\"container\">\n");
      out.write("    <header>\n");
      out.write("      <h1>Notes by Category</h1>\n");
      out.write("      <div class=\"header-actions\">\n");
      out.write("        <a href=\"index.html\" class=\"btn secondary\">\n");
      out.write("          <span class=\"icon\">←</span> Back to Home\n");
      out.write("        </a>\n");
      out.write("        <a href=\"createNote?category=");
      out.print( request.getAttribute("categoryName") );
      out.write("\" class=\"btn primary\">\n");
      out.write("          <span class=\"icon\">+</span> New Note\n");
      out.write("        </a>\n");
      out.write("      </div>\n");
      out.write("    </header>\n");
      out.write("\n");
      out.write("    <div class=\"category-banner\">\n");
      out.write("      <div class=\"category-info\">\n");
      out.write("        <div class=\"category-icon\">🏷️</div>\n");
      out.write("        <div class=\"category-details\">\n");
      out.write("          <h2>");
      out.print( request.getAttribute("categoryName") );
      out.write("</h2>\n");
      out.write("          ");

            ArrayList<Note> notes = (ArrayList<Note>) request.getAttribute("notes");
            int noteCount = notes != null ? notes.size() : 0;
          
      out.write("\n");
      out.write("          <p>");
      out.print( noteCount );
      out.write(' ');
      out.print( noteCount == 1 ? "note" : "notes" );
      out.write(" in this category</p>\n");
      out.write("        </div>\n");
      out.write("      </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <main>\n");
      out.write("      ");

        if (notes != null && !notes.isEmpty()) {
      
      out.write("\n");
      out.write("        <div class=\"notes-grid\">\n");
      out.write("          ");

            for (Note note : notes) {
          
      out.write("\n");
      out.write("            <div class=\"note-card\" onclick=\"location.href='viewNote?id=");
      out.print( note.getId() );
      out.write("'\">\n");
      out.write("              <div class=\"note-title\">\n");
      out.write("                <span class=\"note-icon\">📝</span>\n");
      out.write("                ");
      out.print( note.getName() );
      out.write("\n");
      out.write("              </div>\n");
      out.write("              <div class=\"note-preview\">\n");
      out.write("                ");
      out.print( note.getText().length() > 150 ? note.getText().substring(0, 150) + "..." : note.getText() );
      out.write("\n");
      out.write("              </div>\n");
      out.write("              <div class=\"note-meta\">\n");
      out.write("                <div class=\"directory-path\">\n");
      out.write("                  <span class=\"folder-icon\">📂</span>\n");
      out.write("                  ");
      out.print( note.getDirectoryPath() );
      out.write("\n");
      out.write("                </div>\n");
      out.write("                \n");
      out.write("                ");
 if (!note.getCategories().isEmpty()) { 
      out.write("\n");
      out.write("                  <div class=\"note-categories\">\n");
      out.write("                    ");
 for (String category : note.getCategories()) { 
      out.write("\n");
      out.write("                      <span class=\"category-tag\">");
      out.print( category );
      out.write("</span>\n");
      out.write("                    ");
 } 
      out.write("\n");
      out.write("                  </div>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("                \n");
      out.write("                ");
 if (!note.getImagePaths().isEmpty()) { 
      out.write("\n");
      out.write("                  <div class=\"note-images-info\">\n");
      out.write("                    <span class=\"image-icon\">🖼️</span>\n");
      out.write("                    ");
      out.print( note.getImagePaths().size() );
      out.write(' ');
      out.print( note.getImagePaths().size() == 1 ? "image" : "images" );
      out.write("\n");
      out.write("                  </div>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("              </div>\n");
      out.write("            </div>\n");
      out.write("          ");

            }
          
      out.write("\n");
      out.write("        </div>\n");
      out.write("      ");

        } else {
      
      out.write("\n");
      out.write("        <div class=\"empty-state\">\n");
      out.write("          <p>No notes in this category yet.</p>\n");
      out.write("          <a href=\"createNote?category=");
      out.print( request.getAttribute("categoryName") );
      out.write("\" class=\"btn primary\">\n");
      out.write("            <span class=\"icon\">+</span> Create First Note\n");
      out.write("          </a>\n");
      out.write("        </div>\n");
      out.write("      ");

        }
      
      out.write("\n");
      out.write("    </main>\n");
      out.write("  </div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
