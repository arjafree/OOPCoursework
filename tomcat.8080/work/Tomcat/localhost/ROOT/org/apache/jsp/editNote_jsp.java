/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-22 13:43:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import uk.ac.ucl.model.Category;
import uk.ac.ucl.model.Directory;
import uk.ac.ucl.model.Note;
import java.util.ArrayList;
import java.util.List;
import java.io.IOException;

public final class editNote_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {


  // Helper method to recursively render directory options
  private void renderDirectoryOptions(JspWriter out, Directory directory, String indent, String selectedPath) throws IOException {
    String dirPath = directory.getPath();
    String dirName = directory.getName();
    boolean isSelected = dirPath.equals(selectedPath);

    // Root directory needs special handling
    if (dirPath.equals("/")) {
      out.println("<option value=\"" + dirPath + "\"" + (isSelected ? " selected" : "") + ">" +
                  indent + "Root" + "</option>");
    } else {
      out.println("<option value=\"" + dirPath + "\"" + (isSelected ? " selected" : "") + ">" +
                  indent + dirName + "</option>");
    }

    List<Directory> subdirectories = directory.getSubdirectories();
    if (subdirectories != null && !subdirectories.isEmpty()) {
      for (Directory subdir : subdirectories) {
        renderDirectoryOptions(out, subdir, indent + "— ", selectedPath);
      }
    }
  }

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(8);
    _jspx_imports_classes.add("uk.ac.ucl.model.Category");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("uk.ac.ucl.model.Note");
    _jspx_imports_classes.add("uk.ac.ucl.model.Directory");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("  <title>Edit Note</title>\n");
      out.write("  <link rel=\"stylesheet\" href=\"styles.css\">\n");
      out.write("  <style>\n");
      out.write("    /* Additional styles for file upload */\n");
      out.write("    .file-upload-container {\n");
      out.write("      border: 2px dashed #d1d5db;\n");
      out.write("      border-radius: 0.375rem;\n");
      out.write("      padding: 1.5rem;\n");
      out.write("      text-align: center;\n");
      out.write("      margin-bottom: 1rem;\n");
      out.write("      transition: background-color 0.2s, border-color 0.2s;\n");
      out.write("      position: relative;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .file-upload-container.drag-over {\n");
      out.write("      background-color: rgba(59, 130, 246, 0.05);\n");
      out.write("      border-color: #3b82f6;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .file-upload-container input[type=\"file\"] {\n");
      out.write("      position: absolute;\n");
      out.write("      width: 100%;\n");
      out.write("      height: 100%;\n");
      out.write("      top: 0;\n");
      out.write("      left: 0;\n");
      out.write("      opacity: 0;\n");
      out.write("      cursor: pointer;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .upload-icon {\n");
      out.write("      font-size: 2rem;\n");
      out.write("      margin-bottom: 0.5rem;\n");
      out.write("      color: #6b7280;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .upload-text {\n");
      out.write("      color: #6b7280;\n");
      out.write("      margin-bottom: 0.5rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .upload-hint {\n");
      out.write("      font-size: 0.875rem;\n");
      out.write("      color: #9ca3af;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .image-preview-container {\n");
      out.write("      display: grid;\n");
      out.write("      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n");
      out.write("      gap: 0.75rem;\n");
      out.write("      margin-top: 1rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .image-preview-item {\n");
      out.write("      position: relative;\n");
      out.write("      border-radius: 0.375rem;\n");
      out.write("      overflow: hidden;\n");
      out.write("      border: 1px solid #e5e7eb;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .image-preview-item img {\n");
      out.write("      width: 100%;\n");
      out.write("      height: 150px;\n");
      out.write("      object-fit: cover;\n");
      out.write("      display: block;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .image-preview-item .remove-image {\n");
      out.write("      position: absolute;\n");
      out.write("      top: 0.25rem;\n");
      out.write("      right: 0.25rem;\n");
      out.write("      background-color: rgba(0, 0, 0, 0.5);\n");
      out.write("      color: white;\n");
      out.write("      border-radius: 9999px;\n");
      out.write("      width: 1.5rem;\n");
      out.write("      height: 1.5rem;\n");
      out.write("      display: flex;\n");
      out.write("      align-items: center;\n");
      out.write("      justify-content: center;\n");
      out.write("      cursor: pointer;\n");
      out.write("      font-size: 0.75rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .image-preview-item .image-name {\n");
      out.write("      font-size: 0.75rem;\n");
      out.write("      padding: 0.25rem 0.5rem;\n");
      out.write("      background-color: rgba(0, 0, 0, 0.5);\n");
      out.write("      color: white;\n");
      out.write("      position: absolute;\n");
      out.write("      bottom: 0;\n");
      out.write("      left: 0;\n");
      out.write("      right: 0;\n");
      out.write("      white-space: nowrap;\n");
      out.write("      overflow: hidden;\n");
      out.write("      text-overflow: ellipsis;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .existing-images {\n");
      out.write("      margin-bottom: 1.5rem;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .existing-images h4 {\n");
      out.write("      margin-bottom: 0.75rem;\n");
      out.write("      font-size: 1rem;\n");
      out.write("      color: #4b5563;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .no-js-file-input {\n");
      out.write("      margin-top: 1rem;\n");
      out.write("      display: none;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("  </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("  <div class=\"container\">\n");
      out.write("    ");


      // Get the note from the servlet
      Note note = (Note) request.getAttribute("note");
      if (note != null) {
        String directoryPath = note.getDirectoryPath();
    
      out.write("\n");
      out.write("    <header>\n");
      out.write("      <h1>Edit Note</h1>\n");
      out.write("      <div class=\"header-actions\">\n");
      out.write("        <a href=\"viewNote?id=");
      out.print( note.getId() );
      out.write("\" class=\"btn secondary\">\n");
      out.write("          <span class=\"icon\">←</span> Cancel\n");
      out.write("        </a>\n");
      out.write("      </div>\n");
      out.write("    </header>\n");
      out.write("\n");
      out.write("    <div class=\"main-content single-column\">\n");
      out.write("      <main class=\"notes-container\">\n");
      out.write("        <div class=\"note-editor\">\n");
      out.write("          <form action=\"editNote\" method=\"POST\" id=\"editNoteForm\" enctype=\"multipart/form-data\">\n");
      out.write("            <input type=\"hidden\" name=\"id\" value=\"");
      out.print( note.getId() );
      out.write("\">\n");
      out.write("            <input type=\"hidden\" id=\"directoryPath\" name=\"directoryPath\" value=\"");
      out.print( directoryPath );
      out.write("\">\n");
      out.write("\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("              <label for=\"title\">Title</label>\n");
      out.write("              <input type=\"text\" id=\"title\" name=\"title\" value=\"");
      out.print( note.getName() );
      out.write("\" required>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("              <label for=\"content\">Content</label>\n");
      out.write("              <textarea id=\"content\" name=\"content\" rows=\"8\" required>");
      out.print( note.getText() );
      out.write("</textarea>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("              <label for=\"directorySelect\">Directory</label>\n");
      out.write("              <select id=\"directorySelect\" name=\"directorySelect\" onchange=\"updateDirectoryPath()\">\n");
      out.write("                ");

                  // Get the root directory
                  Directory rootDirectory = (Directory) request.getAttribute("rootDirectory");
                  if (rootDirectory != null) {
                    renderDirectoryOptions(out, rootDirectory, "", directoryPath);
                  }
                
      out.write("\n");
      out.write("              </select>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("              <label>Categories</label>\n");
      out.write("              <div class=\"category-checkboxes\">\n");
      out.write("                ");

                  ArrayList<Category> categories = (ArrayList<Category>) request.getAttribute("categories");
                  if (categories != null) {
                    for (Category category : categories) {
                      boolean isSelected = note.getCategories().contains(category.getName());
                
      out.write("\n");
      out.write("                <div class=\"checkbox-item\">\n");
      out.write("                  <input type=\"checkbox\"\n");
      out.write("                         id=\"category-");
      out.print( category.getName() );
      out.write("\"\n");
      out.write("                         name=\"categories\"\n");
      out.write("                         value=\"");
      out.print( category.getName() );
      out.write("\"\n");
      out.write("                         ");
      out.print( isSelected ? "checked" : "" );
      out.write(">\n");
      out.write("                  <label for=\"category-");
      out.print( category.getName() );
      out.write('"');
      out.write('>');
      out.print( category.getName() );
      out.write("</label>\n");
      out.write("                </div>\n");
      out.write("                ");

                    }
                  }
                
      out.write("\n");
      out.write("              </div>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("              <label>Images</label>\n");
      out.write("              \n");
      out.write("              ");
 if (!note.getImagePaths().isEmpty()) { 
      out.write("\n");
      out.write("              <div class=\"existing-images\">\n");
      out.write("                <h4>Current Images</h4>\n");
      out.write("                <div class=\"image-preview-container\" id=\"existingImagesContainer\">\n");
      out.write("                  ");
 for (String imagePath : note.getImagePaths()) { 
      out.write("\n");
      out.write("                    <div class=\"image-preview-item\">\n");
      out.write("                      <img src=\"");
      out.print( imagePath );
      out.write("\" alt=\"Image\">\n");
      out.write("                      <div class=\"remove-image\" data-path=\"");
      out.print( imagePath );
      out.write("\">✕</div>\n");
      out.write("                      <div class=\"image-name\">");
      out.print( imagePath.substring(imagePath.lastIndexOf("/") + 1) );
      out.write("</div>\n");
      out.write("                      <input type=\"hidden\" name=\"existingImages\" value=\"");
      out.print( imagePath );
      out.write("\" class=\"existing-image-path\">\n");
      out.write("                    </div>\n");
      out.write("                  ");
 } 
      out.write("\n");
      out.write("                </div>\n");
      out.write("              </div>\n");
      out.write("              ");
 } 
      out.write("\n");
      out.write("              \n");
      out.write("              <div class=\"file-upload-container js-only\" id=\"dropZone\">\n");
      out.write("                <input type=\"file\" id=\"imageUpload\" name=\"imageFiles\" multiple accept=\"image/*\">\n");
      out.write("                <div class=\"upload-icon\">📷</div>\n");
      out.write("                <div class=\"upload-text\">Drag and drop new images here or click to browse</div>\n");
      out.write("                <div class=\"upload-hint\">Supported formats: JPG, PNG, GIF</div>\n");
      out.write("              </div>\n");
      out.write("              <div class=\"image-preview-container js-only\" id=\"imagePreviewContainer\"></div>\n");
      out.write("            </div>\n");
      out.write("            \n");
      out.write("            <div class=\"form-actions\">\n");
      out.write("              <button type=\"button\" class=\"btn secondary\" onclick=\"location.href='viewNote?id=");
      out.print( note.getId() );
      out.write("'\">Cancel</button>\n");
      out.write("              <button type=\"button\" class=\"btn primary js-only\" id=\"submitButton\">Save Changes</button>\n");
      out.write("            </div>\n");
      out.write("          </form>\n");
      out.write("        </div>\n");
      out.write("      </main>\n");
      out.write("    </div>\n");
      out.write("    \n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("    <div class=\"empty-state\">\n");
      out.write("      <p>Note not found.</p>\n");
      out.write("      <a href=\"index.html\" class=\"btn primary\">Back to Home</a>\n");
      out.write("    </div>\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("  </div>\n");
      out.write("\n");
      out.write("  <script>\n");
      out.write("\n");
      out.write("    // Directory path update\n");
      out.write("    function updateDirectoryPath() {\n");
      out.write("      const directorySelect = document.getElementById('directorySelect');\n");
      out.write("      const directoryPath = document.getElementById('directoryPath');\n");
      out.write("      directoryPath.value = directorySelect.value;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    // File upload and drag & drop functionality\n");
      out.write("    const dropZone = document.getElementById('dropZone');\n");
      out.write("    const fileInput = document.getElementById('imageUpload');\n");
      out.write("    const previewContainer = document.getElementById('imagePreviewContainer');\n");
      out.write("    const submitButton = document.getElementById('submitButton');\n");
      out.write("    let uploadedFiles = [];\n");
      out.write("    \n");
      out.write("    // Handle existing images\n");
      out.write("    const existingImagesContainer = document.getElementById('existingImagesContainer');\n");
      out.write("    if (existingImagesContainer) {\n");
      out.write("      const removeButtons = existingImagesContainer.querySelectorAll('.remove-image');\n");
      out.write("      removeButtons.forEach(button => {\n");
      out.write("        button.addEventListener('click', function() {\n");
      out.write("          const imagePath = this.getAttribute('data-path');\n");
      out.write("          const imageItem = this.closest('.image-preview-item');\n");
      out.write("          imageItem.remove();\n");
      out.write("        });\n");
      out.write("      });\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    // Handle drag events\n");
      out.write("    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n");
      out.write("      dropZone.addEventListener(eventName, preventDefaults, false);\n");
      out.write("    });\n");
      out.write("    \n");
      out.write("    function preventDefaults(e) {\n");
      out.write("      e.preventDefault();\n");
      out.write("      e.stopPropagation();\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    // Highlight drop zone when dragging over it\n");
      out.write("    ['dragenter', 'dragover'].forEach(eventName => {\n");
      out.write("      dropZone.addEventListener(eventName, highlight, false);\n");
      out.write("    });\n");
      out.write("    \n");
      out.write("    ['dragleave', 'drop'].forEach(eventName => {\n");
      out.write("      dropZone.addEventListener(eventName, unhighlight, false);\n");
      out.write("    });\n");
      out.write("    \n");
      out.write("    function highlight() {\n");
      out.write("      dropZone.classList.add('drag-over');\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    function unhighlight() {\n");
      out.write("      dropZone.classList.remove('drag-over');\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    // Handle dropped files\n");
      out.write("    dropZone.addEventListener('drop', handleDrop, false);\n");
      out.write("    \n");
      out.write("    function handleDrop(e) {\n");
      out.write("      const dt = e.dataTransfer;\n");
      out.write("      const files = dt.files;\n");
      out.write("      handleFiles(files);\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    // Handle selected files from file input\n");
      out.write("    fileInput.addEventListener('change', function() {\n");
      out.write("      handleFiles(this.files);\n");
      out.write("    });\n");
      out.write("    \n");
      out.write("    function handleFiles(files) {\n");
      out.write("      if (files.length > 0) {\n");
      out.write("        Array.from(files).forEach(file => {\n");
      out.write("          if (file.type.startsWith('image/')) {\n");
      out.write("            uploadedFiles.push(file);\n");
      out.write("            previewFile(file);\n");
      out.write("          }\n");
      out.write("        });\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    function previewFile(file) {\n");
      out.write("      const reader = new FileReader();\n");
      out.write("      reader.readAsDataURL(file);\n");
      out.write("      reader.onloadend = function() {\n");
      out.write("        const preview = document.createElement('div');\n");
      out.write("        preview.className = 'image-preview-item';\n");
      out.write("        preview.innerHTML = `\n");
      out.write("          <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${reader.result}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" alt=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${file.name}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("          <div class=\"remove-image\" data-filename=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${file.name}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">✕</div>\n");
      out.write("          <div class=\"image-name\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${file.name}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</div>\n");
      out.write("        `;\n");
      out.write("        previewContainer.appendChild(preview);\n");
      out.write("        \n");
      out.write("        // Add event listener to remove button\n");
      out.write("        preview.querySelector('.remove-image').addEventListener('click', function() {\n");
      out.write("          const filename = this.getAttribute('data-filename');\n");
      out.write("          uploadedFiles = uploadedFiles.filter(f => f.name !== filename);\n");
      out.write("          preview.remove();\n");
      out.write("        });\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    // Form submission\n");
      out.write("    submitButton.addEventListener('click', function() {\n");
      out.write("      const form = document.getElementById('editNoteForm');\n");
      out.write("      \n");
      out.write("      // Create FormData object\n");
      out.write("      const formData = new FormData(form);\n");
      out.write("      \n");
      out.write("      // Add each file to FormData\n");
      out.write("      uploadedFiles.forEach((file, index) => {\n");
      out.write("        formData.append(`imageFile");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${index}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`, file);\n");
      out.write("      });\n");
      out.write("      \n");
      out.write("      // Add number of files\n");
      out.write("      formData.append('imageCount', uploadedFiles.length);\n");
      out.write("      \n");
      out.write("      // Get remaining existing images\n");
      out.write("      const existingImagePaths = [];\n");
      out.write("      document.querySelectorAll('.existing-image-path').forEach(input => {\n");
      out.write("        existingImagePaths.push(input.value);\n");
      out.write("      });\n");
      out.write("      formData.append('existingImagePaths', JSON.stringify(existingImagePaths));\n");
      out.write("      \n");
      out.write("      // Submit the form\n");
      out.write("      fetch('editNote', {\n");
      out.write("        method: 'POST',\n");
      out.write("        body: formData\n");
      out.write("      })\n");
      out.write("      .then(response => {\n");
      out.write("        if (response.ok) {\n");
      out.write("          // Redirect to view the note\n");
      out.write("          window.location.href = `viewNote?id=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${note.getId()}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`;\n");
      out.write("        } else {\n");
      out.write("          alert('Error saving note. Please try again.');\n");
      out.write("        }\n");
      out.write("      })\n");
      out.write("      .catch(error => {\n");
      out.write("        console.error('Error:', error);\n");
      out.write("        alert('Error saving note. Please try again.');\n");
      out.write("      });\n");
      out.write("    });\n");
      out.write("  </script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
